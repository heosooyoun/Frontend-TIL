[내일 퀴즈 공부]

CSS
1. Transition
- CSS 속성의 전환 효과를 지정
- CSS 속성의 시작과 끝을 지정하고 중간값을 애니메이션을 입히는 것

- 속성값

1) transition-property: 전환 효과를 사용할 속성 이름, 기본값 all(전체 속성에 전환 효과를 넣을 수 있지만 특정 속성만 지정해서 넣을 수도 있다.)
2) transition-duration: 전환 효과의 지속 시간 설정, 기본값 0s

<실습>
- 하나는 transition 단축속성을 사용, 다른 하나는 따로 나눠서 사용한 것

.box {
    width : 100px ;
    height : 100px ;
    background : olivedrab ;
    margin : 50px ;
    transition-property : width, background  ;
    transition-duration : 1s ;
}
.box:hover {
    width : 300px ;
    background : dodgerblue ;
}
.box {
    width : 100px ;
    height : 100px ;
    background : olivedrab ;
    margin : 50px ;
    transition : width 1s , background  1s ;
}
.box:hover {
    width : 300px ;
    background : dodgerblue ;
}



3) transition-timing-function: 타이밍 함수 지정, 기본값 ease
- 타이밍 함수란 애니메이션을 빠르게 -> 느리게 순서로 할지, 일정하게 할지 등을 정의하는 함수
4) transition-delay: 전환 효과의 대기시간 설정, 기본값 0s

1.1 transition-property
- 전환 효과를 사용할 속성 이름을 설정
- 값: all(모든 속성에 적용, 기본값), 속성 이름(해당 속성에만 전환 효과 사용) 

1.2 transition-duration
- 전환 효과의 지속 시간을 설정
- 값: 시간
** 1s = 1000ms 로 바꿔서도 사용 가능 

1.3 transition-timing-function
- 타이밍 함수 지정
- 타이밍 함수는 어떠한 그래프를 내부적으로 제공하는데, 이것을 애니메이션에 적용하는 것이다.
- 값
1) ease: 빠르게-> 느리게
2) linear: 일정하게
3) ease- in: 느리게 -> 빠르게
4) ease-out: 빠르게-> 느리게
5) ease-in-out: 느리게-> 빠르게-> 느리게
6) cubic-bazier(n, n, n, n): 자신만의 값을 정의(0~1) 
-> 위의 값들을 cubic-bazier을 이용해 표현할 수 있는데 그냥 명시적인 값으로 사용하는 것이 낫다(ease, linear 등)
7) steps(n): n번 분할된 애니메이션

1.4 transition-delay
- 전환 효과가 몇 초 뒤에 시작할지 대기시간을 설정
ex) transition: 2s 3s; 라고 입력 시 duration 2초, delay 3초라고 인식하게 된다.

2. transform
- 요소의 변환 효과(변형)를 지정
- 비틀기, 전, 확대, 축소, 이동 등에 사용
ex) transform: 원근법 이동 크기 회전 기울임;
transform: rotate(20deg) translate(10px, 0);
- transform 안에 다양한 함수들을 사용해 변환 효과를 줄 수 있다.(skew 비틀기, scale 확대)

2.1 변환 2D 속성
1) translate(x, y): x축, y축으로 이동(x, y 값 중 하나만 사용할 수 있음, translateX, translateY)
2) scale(x, y): x축, y축으로 확대 및 축소(둘 중 하나만 사용 가능, sclaeX, scaleY)
3) rotate(degree): 각도만큼 회전
4) skew(x-deg, y-deg): x축, y축 만큼 기울임 또는 회전(둘 중 하나만 사용 가능, skewX, skewY) 
5) matrix(n, n, n, n, n, n): 위의 4개를 아우르는 함수, 명시적으로 각각 사용하는 것이 좋음

<실습 1>
transform : rotate (45deg );

<실습 2>
transform : translate (100px , 30px );

position으로 대체 가능
 position : relative ;
    left : 100px ;
    top : 30px ;

-> 요소를 이동하고 배치하면 끝나는 경우라면 position을 사용해도 되지만 요소가 실시간으로 변해야 한다면 translate가 적합
-> position은 애니메이션에 적합하지 않음

.box {
    width : 100px ;
    height : 100px ;
    background : olivedrab ;
    display : flex ;
    justify-content : center ;
    align-items : center ;
    font-size : 30px ;
    transition : 1s ;
    
}
.box:hover {
    position : relative ;
    left : 100px ;
    top : 30px ;
}

.box {
    width : 100px ;
    height : 100px ;
    background : olivedrab ;
    display : flex ;
    justify-content : center ;
    align-items : center ;
    font-size : 30px ;
    transition : 1s ;
    
}
.box:hover {
    transform : translate (30px , 30px );
}


* transform 함수 안에 다양한 함수를 사용할 수 있다.
transform : translate (20px , 10px ) skewX (45deg );


3. 변환 3D 속성

3.1 변환 3D 속성
1) translate3d(x, y, z): x축, y축, z축으로 이동(translateZ: z축으로만 이동)
2) scale3d(x, y, z): x축, y축, z축으로 확대 및 축소(scaleZ: z축으로 확대, 축소)
3) rotate3d(z, y, z, a): x 벡터, y벡터, z벡터, 각도만큼 회전(rotateX, rotateY, rotateZ 사용 가능) -> rotateX, rotateY가 3차원이라는 것 알아두기
4) perspective(n): 원근법(거리)
5) matrix3d(인자 16개): 3차원 변환 효과, 명시적으로 각각 사용하는 것이 좋음

<실습 1- translateZ>
- z축은 우리의 눈과 같은 방향이기 때문에 보이지 않는 것
- perspective 함수는 transform의 가장 앞에 선언되어야 한다.


<transform 변환 속성>

4. transform-origin
- 요소 변환의 기준점을 설정
- 값: x, y, z축(기본값: 정가운데) -> 단위를 넣어도 되고 left, right 등을 사용해도 된다.
- 기본적으로 x, y축은 4사분면이다.

5. transform-style
- 3D 변환 요소의 자식 요소도 3D 변환을 사용할지 설정
- 값: flat(자식 요소에 3D 변환을 사용하지 않음, 기본값), preserve-3d(자식 요소에 3D 변환을 사용)

* preserve-3d 속성은 바로 밑 자식에게만 적용되는 것이기 때문에 손자 요소에게도 적용하려면 해당 부모 요소에 계속 명시해줘야 한다.

6. perspective
- 하위 요소를 관찰하는 원근 거리를 설정
- 값: 단위
- 하위 요소를 관찰하는 것이기 때문에 관찰하고자 하는 요소보다 상위에 적용해야 한다.

- perspective 속성과 함수의 차이점

속성/ 함수                          적용 대상                   기준점 설정
perspective                    관찰 대상의 부모 요소          perspective-origin
transform: perspective()            관찰 대상                transform-origin

-> 관찰 대상이 여러 개라면 perspective 속성, 한 개라면 함수를 사용
-> perspective 속성은 관찰 대상의 부모(조상)요소에 적용하여 하위요소를 관찰하는 원근거리 설정, perspective 함수는 관찰 대상에 직접 적용하여 그 대상을 관찰하는 원근거리 설정

7. matrix(a, b, c, d, e, f)
- 요소의 2차원 변환 효과를 지정
- scale, skew, translate, rotate를 지정
- 요소에 일반변환함수(scale, skew, translate, rotate 함수들)를 사용하더라도 브라우저에 의해 matrix로 계산되어 적용이 된다.


