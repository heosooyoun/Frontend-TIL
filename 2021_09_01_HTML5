2021/09/01 
<오늘의 공부>
1. 어제 공부했던 "구조를 나타내는 요소" 내용 정리 -> 생각보다 잊어버린 내용이 많기도 하고, 목요일에 있을 퀴즈를 위해 다시 내용정리를 했다.
2. ReactJS 공부 - codesandbox를 통해 실습을 했다. 
링크: https://codesandbox.io/s/2021-09-01-reactjs-cgp38
- 화살표 함수를 잘 못써서 다시한번 실습을 통한 복습을 하였다.
- react에서 중요도가 높은 map, filter, reduce 함수에 대하여 공부하고 직접 실습해 보았다.

[실습한 코드]

class ArrayUtilities {
  static addZeros = (nums) => nums.map((num) => num * 10);

  static moreThanFifty = (nums) => nums.filter((num) => num > 50);

  static removeFirst = (nums) => nums.filter((num, index) => index !== 0);

  static sumAll = (nums) =>
    nums.reduce(function add(sum, curValue) {
      return (sum += curValue);
    }, 0);

  static divide = (num) => num.toString().split("");
}

const numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];

const addZeros = ArrayUtilities.addZeros(numbers);
console.log(addZeros);

const moreThanFifty = ArrayUtilities.moreThanFifty(addZeros);
console.log(moreThanFifty);

const noFirst = ArrayUtilities.removeFirst(moreThanFifty);
console.log(noFirst);

const sumAll = ArrayUtilities.sumAll(noFirst);
console.log(sumAll);

const divided = ArrayUtilities.divide(sumAll);
console.log(divided);



[구조를 나타내는 요소]
1. 컨테이너- div, span
- div: 콘텐츠 분할 요소, 내용을 넣지 않으면 화면에 아무것도 보이지 않는다.
  -> 의미가 없음, 순수 컨테이너로서 아무것도 표현하지 않는다.
  -> 대부분 스타일을 위해, 문서의 특정 부분이 다른 언어임을 표시
- span: div와 같지만 인라인 컨테이너 -> 구문 콘텐츠를 위한 것

2. 시맨틱 웹이란
- 어떤 웹 페이지를 만들 때, 구성을 생각하게 된다. 
=> 이때 div 태그만을 이용해서 구성할 수도 있고, 기능에 따라 header, article 등의 태그를 다양하게 사용 할 수 있다.
- 시맨틱 웹이란 위의 설명에서 두 번째 경우처럼, 요소 하나하나의 의미를 고려해서 웹 페이지의 구조를 코딩하는 것!
- 장점
  1) 검색 엔진(구글, 네이버 등)이 정보를 수집할 때, 중요한 키워드에 따라 정보를 분류해서 수집할 수 있다. (단순히 div로만 이루어져 있다면, 정보를 분류해서 수집 불가능 -> 단순한 정보의 나열이 될 것이다.)
  2) 의미 있는 코드 블록을 찾기가 쉽다. 
  3) 개발자들이 코드를 유지보수하기가 용이하다.

3. header, footer
- header: 소개 및 탐색에 도움을 주는 콘텐츠 ex) 제목, 로고 등
- footer: ex) 웹 페이지 정보, 연관 웹사이트, 저작권 등  
 => header, footer는 전체 웹 페이지에 한 개만! 사용하기, 웹 페이지 내에서 이동이 발생해도 header, footer는 유지가 된다.

4. nav
- 탐색 구획 요소: 현재 페이지, 다른 페이지로의 링크를 보여주는 구역
ex) Vehicle > Car > Kia 

5. aside
- 별도 구획 요소: 주로 본문과 약간 연관성 있는 내용을 담고 있다. (없어도 메인 컨텐츠를 읽는데 무리가 없는 정보들)
-> 보통 CSS를 이용한 사이드바를 만들어 사용한다.

6. main
- body 태그의 하위 요소로 단 한 개만 사용할 수 있다.
- body 내에 주요 컨텐츠를 의미
- main은 하나지만 안에 존재하는 내용들을 다양하게 넣을 수 있다.

7. article
- 독립적으로 구분해 배포하거나 재사용 할 수 있는 구획
ex) 게시판, 블로그 글 등
- article은 여러개 사용할 수 있는데, 이를 구별하기 위해 자식요소로 제목(h1~h6)을 사용한다.

8. section
- 일반 구획 요소
- article과 section을 구분하는 방법: article이 될 수 있는지 파악하기
  -> article은 따로 떼어서 사용할 수 있지만 section은 따로 떼면 사용하기 어렵다.
ex) ”사과 고를 방법“ -> 그 안에 ”글 소개“, ”고르는 조건“ 등이 포함되어 있다면,
 “사과 고르는 방법” 은 article, 나머지는 section이다. => “소개”만 따로 뗀다면 무엇을 소개하는 지 모름
** 꼭 article 안에 section이 있는 것은 아님! => 반대의 경우도 있음!!
