1. float
- 요소를 좌우 방향으로 띄움(수평정렬)
- flexbox 속성이 새로 생기면서 float을 대체함
- 속성 값: none(요소 띄움 없음, 기본값), left(왼쪽으로 띄움), right(오른쪽으로 띄움)
- 사용법: float: 방향; 

1.1 folat 사용
1) 단순 띄움과 단순 해제
- 요소에 float 속성을 적용하면, 적용된 요소 주변으로 문자(text)가 흐르게 됩니다.
- clear 속성: float을 해제하는 속성


2) 수평 정렬
- 원래는 수직으로 쌓이는 요소들을 각 요소에 float 속성을 적용하면 수평으로 정렬이 가능하다. 

[HTML]
<div  class ="box">1 </div >
     <div  class ="box">2 </div >
     <div  class ="box">3 </div >

[CSS]
.box {
width : 150px ;
height : 100px ;
background : lightgreen ;
font-size : 30px ;
margin : 10px ;
float : left ;
}

* float 이 가진 문제점
- clear를 선언하지 않고 바로 다른 요소를 선언하면 겹치게 된다.
- 따라서 새로 선언하는 요소에 clear 선언을 해줘야 한다.

.box {
width : 150px ;
height : 100px ;
background : lightgreen ;
font-size : 30px ;
margin : 10px ;
float : left ;
}
.box4 {
    width : 200px ;
    height : 150px ;
    background : lightseagreen ;
}
////////////////////////////////////////
.box {
width : 150px ;
height : 100px ;
background : lightgreen ;
font-size : 30px ;
margin : 10px ;
float : left ;
}
.box4 {
    width : 200px ;
    height : 150px ;
    background : lightseagreen ;
    clear : left ;
}



- 보통 clear: both;를 이용

1.2 float 해제
- float 속성이 적용된 요소 주위로 다른 요소들이 흐르게 되는데, 이를 방지하기 위해 속성을 ‘해제’ 해야 한다.

- 해제 방법
1) 형제 요소에 clear: (left, right, both)를 추가하여 해제
- 기존에 실습했던 방법
- float 속성이 추가된 요소의 다음 형제 요소에 clear 속성 추가
- 문제점: 다음 형제 요소가 없는 경우 해제가 안된다

2) 부모 요소에 overflow: (hidden, auto)를 추가하여 해제 
->별로 추천x
- float과 관련없는 속성을 사용하게 된다. -> 편법(해제가 되기는 함)

3) 부모 요소에 clearfix 클래스를 추가하여 해제(추천!)

 .clearfix::after {
    content : "";
    clear : both ;
    display : block ; /*or table*/
}


- clearfix라는 클래스를 가진 요소의 뒤(::after: 가상 요소 선택자)에 clear 속성을 추가(가상 요소 사용 시 무조건 content 필요)
- display: block; 은 float을 해제한 요소를 다음 라인으로 옮기기 위한 것
- float을 사용하는 요소들을 부모 요소로 래핑 후 사용하면 부모 요소 안에서 어떠한 float을 많이 사용하더라도 clear가 적용이 된다.

<실습>

<div  class ="parent clearfix">
         <div  class ="float-box">1 </div >
         <div  class ="float-box">2 </div >
         <div  class ="float-box">3 </div >
         <div  class ="float-box">4 </div >
     </div >
     <div  class ="new-box">New </div >

.clearfix::after {
    content : "";
    clear : both ;
    display : block ;
}
.float-box {
width : 100px ;
height : 100px ;
background : lightseagreen ;
margin : 10px ;
float : left ;
}
.new-box {
    width : 250px ;
    height : 250px ;
    background : lightcoral ;
}



- 주의점: clearfix의 자식 요소에는 무조건 float이 적용된 요소만 존재해야 한다.

2. float-display 수정
- float 속성이 추가된 요소는 display 값이 대부분 block으로 수정됨
- flex, inline-flex -> float 속성이 적용 되어도 block이 되지 않음

3. clear
- float 속성이 적용되지 않도록 지정(해제)
- 속성 값: none(기본 값: float 허용), left, right, both

4. position
- 요소의 위치 지정 방법의 유형(기준)을 지정
4.1 속성 값
1) staitc: 기본값, 유형(기준)없음/재배치 불가능
2) relative: 요소 자신을 기준으로 배치
3) absolute: 위치 상 부모 요소를 기준으로 배치
4) fixed: 브라우저(뷰포트)를 기준으로 배치
5) sticky: 스크롤 영역 기준으로 배치   

4.2 같이 쓰이는 요소
- top: 요소의 position 기준에 맞는 위쪽에서의 거리(위치)를 설정 
     - 단위, %, auto(잘 쓰지 x) 사용, + 음수값 사용 가능
- bottom: 요소의 position 기준에 맞는 아래쪽에서의 거리(위치)를 설정
- left: 요소의 position 기준에 맞는 왼쪽에서의 거리(위치)를 설정 	
- right: 요소의 position 기준에 맞는 오른쪽에서의 거리(위치)를 설정
- left, right의 값으로 %가 가능한데 % 값은 부모 요소의 가로 너비의 비율로 지정

4.3 relative
- 스스로를 기준으로 삼는다. -> 주변에 영향을 주고 받기 때문에 주의해야 한다.
- 자기 자신을 기준으로 위에서 20px, 왼쪽에서 50px만큼 이동한 것이다.

.box {
    width : 100px ;
    height : 100px ;
    background : lightseagreen ;
    border : 4px  dashed  rgb (43 , 119 , 115 );
    border-radius : 10px ;
    display : flex ;
    justify-content : center ;
    align-items : center ;
    font-size : 30px ;
}
.relative {
    position : relative ;
    top : 20px ;
    left : 50px ;
}

4.4 absolute
- 부모 요소(위치 상의 부모 요소)를 기준으로 함
- absolute 속성이 부여된 요소는 부모 요소를 기준으로 배치될 준비를 하기 때문에 다른 형제 요소들과의 상관관계가 사라진다(수직으로 쌓이고 있었다면, 그 요소는 무시되고 쌓인다.)
- 자식인 child가 갖고 있는 absolute의 부모가 되려면 구조상의 부모와는 다르게 위치상의 부모 요소는 해당 요소에 position 값이 존재해야한다.(static 제외)

.grand-parent {
    width : 400px ;
    height : 300px ;
    padding : 30px  100px  100px  30px ;
    border : 4px  dashed  lightgray ;
}
.parent {
    width : 400px ;
    height : 300px ;
    border : 4px  dashed  gray ;
}
.child {
    width : 120px ;
    height : 80px ;
    background : lightseagreen ;
    border : 4px  dashed  rgb (68 , 138 , 134 );
    border-radius : 10px ;
    font-size : 30px ;
    display : flex ;
    justify-content : center ;
    align-items : center ;
}
.absolute {
    position : absolute ;
    top : 50px ;
    left : 100px ;
}
///////////////////////////////////////////////
.grand-parent {
    width : 400px ;
    height : 300px ;
    padding : 30px  100px  100px  30px ;
    border : 4px  dashed  lightgray ;
}
.parent {
    width : 400px ;
    height : 300px ;
    border : 4px  dashed  gray ;
    position : relative ;
}
.child {
    width : 120px ;
    height : 80px ;
    background : lightseagreen ;
    border : 4px  dashed  rgb (68 , 138 , 134 );
    border-radius : 10px ;
    font-size : 30px ;
    display : flex ;
    justify-content : center ;
    align-items : center ;
}
.absolute {
    position : absolute ;
    top : 50px ;
    left : 100px ;
} 

4.5 fixed
- 브라우저(뷰포트)를 기준으로 배치하고자 할 때
- absolute에서 부모 요소를 모를 때(position 요소가 있는 요소가 없을 때) 자식 요소에 absolute를 사용하면 fixed와 비슷한 기능을 한다.

4.6 sticky
- 스크롤 영역을 기준으로 배치 
- top, bottom, left, right 속성이 1개 이상 존재해야 하고, 그 값이 스크롤 영역에 맡닿았을 때만 동작
- IE 지원 불가
ex) sticky 사용 후 top: 0;이면 스크롤의 제일 상단에 위치
 
- title이 스크롤의 상단에 존재하는 것을 볼 수 있다.

5. position 특징- 요소 쌓임 순서
- 요소가 쌓여있는 순서를 통해 어떤 요소가 사용자와 가깝게 있는지(더 위에 쌓이는지)를 결정(Z축)
1) static을 제외한 position 속성의 값이 있는 경우 가장 위에 쌓임(값은 무관)
2) position이 모두 존재한다면 z-index 속성의 숫자 값이 높을수록 위에 쌓임
3) position의 속성값이 있고, z-index 속성의 숫자 값이 같다면, ‘HTML’의 마지막 코드일수록 위에 쌓임(나중에 작성한 코드(요소))

* z-index는 position이 있는 요소에만 사용 가능

- 기본은 코드 순서대로 배치가 된다.-> 가장 늦게 작성된 5번이 가장 위에 존재
- 4번 요소에 position값을 부여한 것 -> 4번이 5번보다 위에 존재
- 3번 요소에 position과 z-index를 1로 부여 -> 3번이 가장 위에 존재
- z-index 값이 클수록 위에 쌓임

6. position 특징- display 수정
- 이전에 float 속성이 부여되면 대부분 display 속성이 block이 된다는 것을 배움
- absolute, fixed 속성 값이 적용된 요소는 display 속성의 값이 대부분 block으로 수정됨
------------------------------------------------------------------
