Code SandBox 링크: https://codesandbox.io/s/2021-09-14-css-b87fq?file=/styles/second.css

[Flexbox]
1. flexbox 개요
- CSS 3에서 추가된 내용: 이전에는 요소를 수직, 수평정렬하는 방법이 정해져 있지 않았지만(여러가지 방법 존재), 
- 1차원에서 사용할 수 있는 정렬

<실습- 블록 요소를 인라인처럼 정렬하려면(이전 방법)>
[HTML]
<body >
<div class ="container">
<div class ="item">1 </div >
<div class ="item">2 </div >
<div class ="item">3 </div >
<div class ="item">4 </div >
<div class ="item">5 </div >
</div >
</body >

[CSS]
.container {
border : 5px dashed orange ;
}
.item {
width : 50px ;
height : 50px ;
background-color : palegreen ;
border : 3px solid green ;

display : inline-block ;
/*float: left*/
}
- display 속성을 inline이라고 하지 않는 이유: 인라인 요소는 너비나 높이를 조정할 수 없기 때문에, inline-block을 이용하여 모양 그대로 가로로 정렬하도록 한다!
- but div 박스 사이사이에 여백이 존재 -> 글자 하나하나처럼 생각(스페이스 바 한번이라고 생각하면 된다.) => html에서 div 요소를 붙여쓰면 여백이 사라진다.

- float: left; 도 사용할 수 있는데, 대신 item 요소가 둥둥 뜨기 때문에 container안에 들어가지 않게 됨 => 별로인 방법 

[변경된 방법]
.container {
border : 5px dashed orange ;
display : flex ;
}
- 브라우저 크기에 맞춰서 유연하게 동작하게 됨
=> flexbox는 정렬하기 위한 속성
=> flexbox의 기본은 container와 item이 함께 있어야 하기 때문에 부모 요소에 적용한다.

2. 용어- flex container, flex item, main axis, cross axis
 1) flex container: 아이템들을 감싸고 있는 바깥쪽 부모 영역
 2) flex item: 내부에 정렬을 위해 담아놓은 여러 개의 아이템들
=> 이 두 개를 구별하는 이유는 container에 사용하는 속성들이 있고, item에 사용하는 속성이 있는데 이 두 개를 바꿔서 사용하면 오류가 발생하기 때문
 3) main axis: 축 중에서 메인이 되는 축(주축, x축)
 4) cross axis: 주축과 수직인 축(교차축, 아래쪽 y축)

3. Container- display
- 어떤 요소의 앞뒤와의 관계 or 어떤 요소 내부의 아이템 레이아웃을 정의하는 것 둘 다 가능
- 속성
 1) display-outside: block/inline => 어떤 요소를 기준으로 앞/뒤 요소와의 관계를 정의한 것
 2) display-inside: flex/grid => 어떤 요소의 내부 아이템의 레이아웃을 정의한 것
 => 이 두가지는 속성이 완전히 다른것이라고 생각해야 한다.
=> 두 속성을 동시에 사용할 수 있다.
ex) display: inline-flex;

4. Container- flex-direction
- 컨테이너 내의 아이템을 배치할 때 사용할 주축 및 방향을 지정
- 기본 상태: 주축은 왼쪽에서 오른쪽으로 진행하는 x축/ 교차축은 위에서 아래쪽을 진행하는 y축

- 속성
 1) row: 기본값
 2) row-reverse: 주축이 오른쪽에서 왼쪽으로 진행 
 3) column: 주축이 기본값의 교차축처럼 바뀐다.(위에서 아래로)
 4) column-reverse: 교차축의 반대처럼 => 아래에서 위로

<실습>
- 위 코드와 거의 동일
.container {
height : 500px ;
border : 5px dashed orange ;
display : flex ;
flex-direction : column-reverse ;
}

5. Container- flex-wrap, flex-flow(shorthand)
 1) flex-wrap: 컨테이너 내의 아이템들은 브라우저의 크기를 줄이면 -> 컨테이너의 크기가 줄어들면 한 줄에 배치하기 위해 각각의 아이템들이 작아지게 된다.
  - nowrap: 기본값= 무조건 강제로 한 줄에 배치
  - wrap: 아이템이 여러 행에 나눠서 배치, 위에서 아래로 쌓임 (원래 크기를 지킬 수 있다)
  - wrap-reverse: 위와 같지만 시작점과 끝점이 반대로

 2) flex-flow: 단축속성
  - flex-direction/flex-wrap 속성의 단축 속성
  ex) flex-flow: row wrap;

<실습>
flex-flow : column wrap ;

flex-direction : column ;
flex-wrap : wrap ;
- 위의 한줄과 아래 두줄이 같은 의미

6. Item- order
- 컨테이너 안에서 현재 요소의 배치 순서 결정
- 기본값: 0 (속성값은 숫자=> 음수도 가능)
- 모든 아이템의 order가 0이라면 코드의 순서를 따라간다.
- order가 작으면 앞에 배치, order가 크면 뒤에 배치(오름 차순), 같은 값이면 소스코드 순서대로
- 이 속성을 쓰려면 부모 요소에 flex 속성이 있어야 한다.
** html을 변경하는 것은 아니고 단순히 시각적인 화면 배치만 바꾸는 것

<실습>
.item:nth-child (3 ) {
	order : -1 ;
}
- 3번째 요소가 맨 앞으로 배치가 된다.
- 만약 양수값 ex) 1 이였다면 나머지가 0이기 때문에 맨 뒤로 보내지게 된다.

7. Container- align-items
- 교차축에 대한 정렬을 하는 것
- justify-content는 한 줄에서 아이템을 왼쪽/오른쪽/가운데 정렬에 대한 것
- 기본적으로 flex 속성은 1차원 정렬이기 때문에 한 줄에 대해서만 이야기 할 수 있다. 
 -> align-items는 이 한 줄을 교차축에서 어떻게 배열할 지에 대한 이야기
 -> 전체 컨테이너 안에서 한 줄을 위에 or 중간에 or 아래에 배치 할 것인지
- 속성
 1) strech: 기본값/ 기본적으로 아이템들은 한 줄에서 갖을 수 있는 길이 모두를 차지한다.
 2) flex-start: 교차축의 시작점에 존재
 3) flex-end: 교차축의 끝점에 존재
 4) center: 교차축의 가운데에 존재 
-> space-around/space-between은 존재 x

** 아이템이 한 줄내에 모두 존재할 때: align-items 사용
** 아이템이 여러 줄에 존재할 때: align-content 사용

<실습>
.container {
height : 400px ;
border : 5px dashed orange ;
margin-bottom : 20px ;
display : flex ;
align-items : center ;
}

8. Container- align-content
- 여러 줄에 대한 교차축 정렬(뒤에 content가 붙으면 여러 줄/여러 아이템에 대한 정렬)
- 속성: justify-content와 동일

<실습>
align-content : flex-start ;
- 교차축의 시작 부분에 덩어리로 모여있음

- 여러줄이기 때문에 space-around/space-between은 존재
  -> space-between: 동일한 간격을 갖고 줄마다 떨어져 있음
  -> space-around: 각 줄의 앞/뒤 간격을 일정하게 
  
  9. Item- align-self
- 만약 여러줄인 상태에서 align-items(한줄속성)을 사용하게 되면 각 줄이 하나의 컨테이너가 된 것처럼 작동한다.
- align-items에 존재하는 속성 사용 가능

ex) align-items: flex-end; 속성을 3줄이 존재할 때 사용하면 각 줄을 하나의 컨테이너로 잡고 아래쪽에 배치되게 된다.
ex) align-items: center; 이 라인은 각각의 아이템에게 center 속성을 넣어준 것
    align-self: flex-start; 이 라인이 추가되면 한 개의 아이템에게만 center가 아닌 flex-start 속성을 덮어씌우게 된다.
